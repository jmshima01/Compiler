1 Class
4 SquareGame
6 ClassVarDec
8 field
11 Square
12 VarName
13 square
17 ClassVarDec
19 field
21 int
22 VarName
23 direction
29 SubroutineDec
31 constructor
35 SquareGame
37 new
42 SubroutineBody
48 LetStatement
50 VarName
51 square
55 Expression
57 SubroutineCall
59 Square
62 new
64 ExpressionList
65 Expression
68 integerconstant
67 0
73 Expression
76 integerconstant
75 0
81 Expression
84 integerconstant
83 30
95 LetStatement
97 VarName
98 direction
102 Expression
105 integerconstant
104 0
111 ReturnStatement
114 Expression
116 KeywordConstant
117 this
124 SubroutineDec
126 method
128 void
130 dispose
135 SubroutineBody
143 DoStatement
145 square
148 dispose
158 DoStatement
160 Memory
163 deAlloc
165 ExpressionList
166 Expression
168 KeywordConstant
169 this
178 ReturnStatement
186 SubroutineDec
188 method
190 void
192 moveSquare
197 SubroutineBody
203 IfStatement
206 Expression
208 VarName
209 direction
211 Op
212 =
215 integerconstant
214 1
224 DoStatement
226 square
229 moveUp
242 IfStatement
245 Expression
247 VarName
248 direction
250 Op
251 =
254 integerconstant
253 2
263 DoStatement
265 square
268 moveDown
281 IfStatement
284 Expression
286 VarName
287 direction
289 Op
290 =
293 integerconstant
292 3
302 DoStatement
304 square
307 moveLeft
320 IfStatement
323 Expression
325 VarName
326 direction
328 Op
329 =
332 integerconstant
331 4
341 DoStatement
343 square
346 moveRight
361 DoStatement
363 Sys
366 wait
368 ExpressionList
369 Expression
372 integerconstant
371 5
381 ReturnStatement
389 SubroutineDec
391 method
393 void
395 run
400 SubroutineBody
403 VarDec
406 char
407 VarName
408 key
413 VarDec
416 boolean
417 VarName
418 exit
426 LetStatement
428 VarName
429 exit
433 Expression
435 KeywordConstant
436 false
442 WhileStatement
445 Expression
447 UnaryOp
448 ~
450 VarName
451 exit
458 WhileStatement
461 Expression
463 VarName
464 key
466 Op
467 =
470 integerconstant
469 0
477 LetStatement
479 VarName
480 key
484 Expression
486 SubroutineCall
488 Keyboard
491 keyPressed
503 DoStatement
505 moveSquare
516 IfStatement
519 Expression
521 VarName
522 key
524 Op
525 =
528 integerconstant
527 81
535 LetStatement
537 VarName
538 exit
542 Expression
544 KeywordConstant
545 true
556 IfStatement
559 Expression
561 VarName
562 key
564 Op
565 =
568 integerconstant
567 90
577 DoStatement
579 square
582 decSize
595 IfStatement
598 Expression
600 VarName
601 key
603 Op
604 =
607 integerconstant
606 88
616 DoStatement
618 square
621 incSize
634 IfStatement
637 Expression
639 VarName
640 key
642 Op
643 =
646 integerconstant
645 131
653 LetStatement
655 VarName
656 direction
660 Expression
663 integerconstant
662 1
674 IfStatement
677 Expression
679 VarName
680 key
682 Op
683 =
686 integerconstant
685 133
693 LetStatement
695 VarName
696 direction
700 Expression
703 integerconstant
702 2
714 IfStatement
717 Expression
719 VarName
720 key
722 Op
723 =
726 integerconstant
725 130
733 LetStatement
735 VarName
736 direction
740 Expression
743 integerconstant
742 3
754 IfStatement
757 Expression
759 VarName
760 key
762 Op
763 =
766 integerconstant
765 132
773 LetStatement
775 VarName
776 direction
780 Expression
783 integerconstant
782 4
794 WhileStatement
797 Expression
799 UnaryOp
800 ~
803 Expression
805 VarName
806 key
808 Op
809 =
812 integerconstant
811 0
822 LetStatement
824 VarName
825 key
829 Expression
831 SubroutineCall
833 Keyboard
836 keyPressed
848 DoStatement
850 moveSquare
864 ReturnStatement

1 4 6 29
6 8 11 12 17
12 13
17 19 21 22
22 23
29 31 35 37 42 124
42 48 95 111
48 50 55
50 51
55 57
57 59 62 64
64 65 73 81
65 68
68 67
73 76
76 75
81 84
84 83
95 97 102
97 98
102 105
105 104
111 114
114 116
116 117
124 126 128 130 135 186
135 143 158 178
143 145 148
158 160 163 165
165 166
166 168
168 169
186 188 190 192 197 389
197 203 242 281 320 361 381
203 206 224
206 208 211 215
208 209
211 212
215 214
224 226 229
242 245 263
245 247 250 254
247 248
250 251
254 253
263 265 268
281 284 302
284 286 289 293
286 287
289 290
293 292
302 304 307
320 323 341
323 325 328 332
325 326
328 329
332 331
341 343 346
361 363 366 368
368 369
369 372
372 371
389 391 393 395 400
400 403 413 426 442 864
403 406 407
407 408
413 416 417
417 418
426 428 433
428 429
433 435
435 436
442 445 458 516 556 595 634 674 714 754 794
445 447 450
447 448
450 451
458 461 477 503
461 463 466 470
463 464
466 467
470 469
477 479 484
479 480
484 486
486 488 491
503 505
516 519 535
519 521 524 528
521 522
524 525
528 527
535 537 542
537 538
542 544
544 545
556 559 577
559 561 564 568
561 562
564 565
568 567
577 579 582
595 598 616
598 600 603 607
600 601
603 604
607 606
616 618 621
634 637 653
637 639 642 646
639 640
642 643
646 645
653 655 660
655 656
660 663
663 662
674 677 693
677 679 682 686
679 680
682 683
686 685
693 695 700
695 696
700 703
703 702
714 717 733
717 719 722 726
719 720
722 723
726 725
733 735 740
735 736
740 743
743 742
754 757 773
757 759 762 766
759 760
762 763
766 765
773 775 780
775 776
780 783
783 782
794 797 822 848
797 799 803
799 800
803 805 808 812
805 806
808 809
812 811
822 824 829
824 825
829 831
831 833 836
848 850
