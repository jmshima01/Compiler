1 Class
4 PongGame
6 ClassVarDec
8 static
11 PongGame
12 VarName
13 instance
17 ClassVarDec
19 field
22 Bat
23 VarName
24 bat
28 ClassVarDec
30 field
33 Ball
34 VarName
35 ball
39 ClassVarDec
41 field
43 int
44 VarName
45 wall
49 ClassVarDec
51 field
53 boolean
54 VarName
55 exit
59 ClassVarDec
61 field
63 int
64 VarName
65 score
69 ClassVarDec
71 field
73 int
74 VarName
75 lastWall
79 ClassVarDec
81 field
83 int
84 VarName
85 batWidth
91 SubroutineDec
93 constructor
97 PongGame
99 new
104 SubroutineBody
112 DoStatement
114 Screen
117 clearScreen
120 ExpressionList
125 LetStatement
127 VarName
128 batWidth
132 Expression
135 integerconstant
134 50
141 LetStatement
143 VarName
144 bat
148 Expression
150 SubroutineCall
152 Bat
155 new
157 ExpressionList
158 Expression
161 integerconstant
160 230
166 Expression
169 integerconstant
168 229
174 Expression
176 VarName
177 batWidth
182 Expression
185 integerconstant
184 7
196 LetStatement
198 VarName
199 ball
203 Expression
205 SubroutineCall
207 Ball
210 new
212 ExpressionList
213 Expression
216 integerconstant
215 253
221 Expression
224 integerconstant
223 222
229 Expression
232 integerconstant
231 0
237 Expression
240 integerconstant
239 511
245 Expression
248 integerconstant
247 0
253 Expression
256 integerconstant
255 229
269 DoStatement
271 ball
274 setDestination
276 ExpressionList
277 Expression
280 integerconstant
279 400
285 Expression
288 integerconstant
287 0
299 DoStatement
301 Screen
304 drawRectangle
306 ExpressionList
307 Expression
310 integerconstant
309 0
315 Expression
318 integerconstant
317 238
323 Expression
326 integerconstant
325 511
331 Expression
334 integerconstant
333 240
345 DoStatement
347 Output
350 moveCursor
352 ExpressionList
353 Expression
356 integerconstant
355 22
361 Expression
364 integerconstant
363 0
375 DoStatement
377 Output
380 printString
382 ExpressionList
383 Expression
386 stringconstant
385 Score: 0
395 LetStatement
397 VarName
398 exit
402 Expression
404 KeywordConstant
405 false
411 LetStatement
413 VarName
414 score
418 Expression
421 integerconstant
420 0
427 LetStatement
429 VarName
430 wall
434 Expression
437 integerconstant
436 0
443 LetStatement
445 VarName
446 lastWall
450 Expression
453 integerconstant
452 0
459 ReturnStatement
462 Expression
464 KeywordConstant
465 this
472 SubroutineDec
474 method
476 void
478 dispose
483 SubroutineBody
491 DoStatement
493 bat
496 dispose
499 ExpressionList
506 DoStatement
508 ball
511 dispose
514 ExpressionList
521 DoStatement
523 Memory
526 deAlloc
528 ExpressionList
529 Expression
531 KeywordConstant
532 this
541 ReturnStatement
549 SubroutineDec
551 function
553 void
555 newInstance
560 SubroutineBody
566 LetStatement
568 VarName
569 instance
573 Expression
575 SubroutineCall
577 PongGame
580 new
583 ExpressionList
590 ReturnStatement
598 SubroutineDec
600 function
604 PongGame
606 getInstance
611 SubroutineBody
617 ReturnStatement
620 Expression
622 VarName
623 instance
630 SubroutineDec
632 method
634 void
636 run
641 SubroutineBody
644 VarDec
647 char
648 VarName
649 key
657 WhileStatement
660 Expression
662 UnaryOp
663 ~
665 VarName
666 exit
673 WhileStatement
676 Expression
679 Expression
681 VarName
682 key
684 Op
685 =
688 integerconstant
687 0
693 Op
694 &
697 Expression
699 UnaryOp
700 ~
702 VarName
703 exit
713 LetStatement
715 VarName
716 key
720 Expression
722 SubroutineCall
724 Keyboard
727 keyPressed
730 ExpressionList
739 DoStatement
741 bat
744 move
747 ExpressionList
754 DoStatement
756 moveBall
759 ExpressionList
767 IfStatement
770 Expression
772 VarName
773 key
775 Op
776 =
779 integerconstant
778 130
788 DoStatement
790 bat
793 setDirection
795 ExpressionList
796 Expression
799 integerconstant
798 1
811 ElseStatement
816 IfStatement
819 Expression
821 VarName
822 key
824 Op
825 =
828 integerconstant
827 132
837 DoStatement
839 bat
842 setDirection
844 ExpressionList
845 Expression
848 integerconstant
847 2
860 ElseStatement
865 IfStatement
868 Expression
870 VarName
871 key
873 Op
874 =
877 integerconstant
876 140
884 LetStatement
886 VarName
887 exit
891 Expression
893 KeywordConstant
894 true
913 WhileStatement
916 Expression
919 Expression
921 UnaryOp
922 ~
925 Expression
927 VarName
928 key
930 Op
931 =
934 integerconstant
933 0
942 Op
943 &
946 Expression
948 UnaryOp
949 ~
951 VarName
952 exit
962 LetStatement
964 VarName
965 key
969 Expression
971 SubroutineCall
973 Keyboard
976 keyPressed
979 ExpressionList
988 DoStatement
990 bat
993 move
996 ExpressionList
1003 DoStatement
1005 moveBall
1008 ExpressionList
1021 IfStatement
1024 Expression
1026 VarName
1027 exit
1036 DoStatement
1038 Output
1041 moveCursor
1043 ExpressionList
1044 Expression
1047 integerconstant
1046 10
1052 Expression
1055 integerconstant
1054 27
1066 DoStatement
1068 Output
1071 printString
1073 ExpressionList
1074 Expression
1077 stringconstant
1076 Game Over
1089 ReturnStatement
1099 SubroutineDec
1101 method
1103 void
1105 moveBall
1110 SubroutineBody
1113 VarDec
1116 int
1117 VarName
1118 bouncingDirection
1121 VarName
1122 batLeft
1125 VarName
1126 batRight
1129 VarName
1130 ballLeft
1133 VarName
1134 ballRight
1142 LetStatement
1144 VarName
1145 wall
1149 Expression
1151 SubroutineCall
1153 ball
1156 move
1159 ExpressionList
1166 IfStatement
1169 Expression
1172 Expression
1174 VarName
1175 wall
1177 Op
1178 >
1181 integerconstant
1180 0
1186 Op
1187 &
1190 Expression
1192 UnaryOp
1193 ~
1196 Expression
1198 VarName
1199 wall
1201 Op
1202 =
1204 VarName
1205 lastWall
1218 LetStatement
1220 VarName
1221 lastWall
1225 Expression
1227 VarName
1228 wall
1234 LetStatement
1236 VarName
1237 bouncingDirection
1241 Expression
1244 integerconstant
1243 0
1250 LetStatement
1252 VarName
1253 batLeft
1257 Expression
1259 SubroutineCall
1261 bat
1264 getLeft
1267 ExpressionList
1274 LetStatement
1276 VarName
1277 batRight
1281 Expression
1283 SubroutineCall
1285 bat
1288 getRight
1291 ExpressionList
1298 LetStatement
1300 VarName
1301 ballLeft
1305 Expression
1307 SubroutineCall
1309 ball
1312 getLeft
1315 ExpressionList
1322 LetStatement
1324 VarName
1325 ballRight
1329 Expression
1331 SubroutineCall
1333 ball
1336 getRight
1339 ExpressionList
1346 IfStatement
1349 Expression
1351 VarName
1352 wall
1354 Op
1355 =
1358 integerconstant
1357 4
1365 LetStatement
1367 VarName
1368 exit
1372 Expression
1375 Expression
1377 VarName
1378 batLeft
1380 Op
1381 >
1383 VarName
1384 ballRight
1389 Op
1390 pipe
1393 Expression
1395 VarName
1396 batRight
1398 Op
1399 <
1401 VarName
1402 ballLeft
1411 IfStatement
1414 Expression
1416 UnaryOp
1417 ~
1419 VarName
1420 exit
1427 IfStatement
1430 Expression
1432 VarName
1433 ballRight
1435 Op
1436 <
1439 Expression
1441 VarName
1442 batLeft
1444 Op
1445 +
1448 integerconstant
1447 10
1458 LetStatement
1460 VarName
1461 bouncingDirection
1465 Expression
1467 UnaryOp
1468 -
1471 integerconstant
1470 1
1480 ElseStatement
1485 IfStatement
1488 Expression
1490 VarName
1491 ballLeft
1493 Op
1494 >
1497 Expression
1499 VarName
1500 batRight
1502 Op
1503 -
1506 integerconstant
1505 10
1516 LetStatement
1518 VarName
1519 bouncingDirection
1523 Expression
1526 integerconstant
1525 1
1540 LetStatement
1542 VarName
1543 batWidth
1547 Expression
1549 VarName
1550 batWidth
1552 Op
1553 -
1556 integerconstant
1555 2
1564 DoStatement
1566 bat
1569 setWidth
1571 ExpressionList
1572 Expression
1574 VarName
1575 batWidth
1584 LetStatement
1586 VarName
1587 score
1591 Expression
1593 VarName
1594 score
1596 Op
1597 +
1600 integerconstant
1599 1
1608 DoStatement
1610 Output
1613 moveCursor
1615 ExpressionList
1616 Expression
1619 integerconstant
1618 22
1624 Expression
1627 integerconstant
1626 7
1638 DoStatement
1640 Output
1643 printInt
1645 ExpressionList
1646 Expression
1648 VarName
1649 score
1670 DoStatement
1672 ball
1675 bounce
1677 ExpressionList
1678 Expression
1680 VarName
1681 bouncingDirection
1695 ReturnStatement

1 4 6 91
6 8 11 12 17
12 13
17 19 22 23 28
23 24
28 30 33 34 39
34 35
39 41 43 44 49
44 45
49 51 53 54 59
54 55
59 61 63 64 69
64 65
69 71 73 74 79
74 75
79 81 83 84
84 85
91 93 97 99 104 472
104 112 125 141 196 269 299 345 375 395 411 427 443 459
112 114 117 120
125 127 132
127 128
132 135
135 134
141 143 148
143 144
148 150
150 152 155 157
157 158 166 174 182
158 161
161 160
166 169
169 168
174 176
176 177
182 185
185 184
196 198 203
198 199
203 205
205 207 210 212
212 213 221 229 237 245 253
213 216
216 215
221 224
224 223
229 232
232 231
237 240
240 239
245 248
248 247
253 256
256 255
269 271 274 276
276 277 285
277 280
280 279
285 288
288 287
299 301 304 306
306 307 315 323 331
307 310
310 309
315 318
318 317
323 326
326 325
331 334
334 333
345 347 350 352
352 353 361
353 356
356 355
361 364
364 363
375 377 380 382
382 383
383 386
386 385
395 397 402
397 398
402 404
404 405
411 413 418
413 414
418 421
421 420
427 429 434
429 430
434 437
437 436
443 445 450
445 446
450 453
453 452
459 462
462 464
464 465
472 474 476 478 483 549
483 491 506 521 541
491 493 496 499
506 508 511 514
521 523 526 528
528 529
529 531
531 532
549 551 553 555 560 598
560 566 590
566 568 573
568 569
573 575
575 577 580 583
598 600 604 606 611 630
611 617
617 620
620 622
622 623
630 632 634 636 641 1099
641 644 657 1021
644 647 648
648 649
657 660 673 767
660 662 665
662 663
665 666
673 676 713 739 754
676 679 693 697
679 681 684 688
681 682
684 685
688 687
693 694
697 699 702
699 700
702 703
713 715 720
715 716
720 722
722 724 727 730
739 741 744 747
754 756 759
767 770 788 811 913
770 772 775 779
772 773
775 776
779 778
788 790 793 795
795 796
796 799
799 798
811 816
816 819 837 860
819 821 824 828
821 822
824 825
828 827
837 839 842 844
844 845
845 848
848 847
860 865
865 868 884
868 870 873 877
870 871
873 874
877 876
884 886 891
886 887
891 893
893 894
913 916 962 988 1003
916 919 942 946
919 921 925
921 922
925 927 930 934
927 928
930 931
934 933
942 943
946 948 951
948 949
951 952
962 964 969
964 965
969 971
971 973 976 979
988 990 993 996
1003 1005 1008
1021 1024 1036 1066 1089
1024 1026
1026 1027
1036 1038 1041 1043
1043 1044 1052
1044 1047
1047 1046
1052 1055
1055 1054
1066 1068 1071 1073
1073 1074
1074 1077
1077 1076
1099 1101 1103 1105 1110
1110 1113 1142 1166
1113 1116 1117 1121 1125 1129 1133
1117 1118
1121 1122
1125 1126
1129 1130
1133 1134
1142 1144 1149
1144 1145
1149 1151
1151 1153 1156 1159
1166 1169 1218 1234 1250 1274 1298 1322 1346 1695
1169 1172 1186 1190
1172 1174 1177 1181
1174 1175
1177 1178
1181 1180
1186 1187
1190 1192 1196
1192 1193
1196 1198 1201 1204
1198 1199
1201 1202
1204 1205
1218 1220 1225
1220 1221
1225 1227
1227 1228
1234 1236 1241
1236 1237
1241 1244
1244 1243
1250 1252 1257
1252 1253
1257 1259
1259 1261 1264 1267
1274 1276 1281
1276 1277
1281 1283
1283 1285 1288 1291
1298 1300 1305
1300 1301
1305 1307
1307 1309 1312 1315
1322 1324 1329
1324 1325
1329 1331
1331 1333 1336 1339
1346 1349 1365 1411 1670
1349 1351 1354 1358
1351 1352
1354 1355
1358 1357
1365 1367 1372
1367 1368
1372 1375 1389 1393
1375 1377 1380 1383
1377 1378
1380 1381
1383 1384
1389 1390
1393 1395 1398 1401
1395 1396
1398 1399
1401 1402
1411 1414 1427
1414 1416 1419
1416 1417
1419 1420
1427 1430 1458 1480 1540 1564 1584 1608 1638
1430 1432 1435 1439
1432 1433
1435 1436
1439 1441 1444 1448
1441 1442
1444 1445
1448 1447
1458 1460 1465
1460 1461
1465 1467 1471
1467 1468
1471 1470
1480 1485
1485 1488 1516
1488 1490 1493 1497
1490 1491
1493 1494
1497 1499 1502 1506
1499 1500
1502 1503
1506 1505
1516 1518 1523
1518 1519
1523 1526
1526 1525
1540 1542 1547
1542 1543
1547 1549 1552 1556
1549 1550
1552 1553
1556 1555
1564 1566 1569 1571
1571 1572
1572 1574
1574 1575
1584 1586 1591
1586 1587
1591 1593 1596 1600
1593 1594
1596 1597
1600 1599
1608 1610 1613 1615
1615 1616 1624
1616 1619
1619 1618
1624 1627
1627 1626
1638 1640 1643 1645
1645 1646
1646 1648
1648 1649
1670 1672 1675 1677
1677 1678
1678 1680
1680 1681
