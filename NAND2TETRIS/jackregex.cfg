keyword -> 'class' | 'constructor' | 'function' | 'method' | 'field' | 'static' | 'var'
| 'int' | 'char' | 'boolean' | 'void' 
| 'true' | 'false' 
| 'null' | 'this' 
| 'let' | 'do' | 'if' | 'else' | 'while' | 'return'
symbol -> '{' | '}' | '(' | ')' | '[' | ']' 
| '.' | ',' | ';' | '+' | '-' | '*' | '/' 
| '&' | '|' | '<' | '>' | '=' | '~'
integerConstant -> 'INTEGER_CONSTANT_PLACEHOLDER'
stringConstant -> 'STRING_CONSTANT_PLACEHOLDER'
identifier -> 'IDENTIFIER_PLACEHOLDER'
classDec -> 'class' className '{' classVarDecKleene subroutineDecKleene '}' $
classVarDecKleene -> classVarDec classVarDecKleene
| lambda
classVarDec -> classVarDecSF type varName varDecExt ';'
classVarDecSF -> 'static' | 'field'
type -> 'int' | 'char' | 'boolean' | className
subroutineDecKleene -> subroutineDec subroutineDecKleene
| lambda
subroutineDec -> subroutineDecCFM subroutineDecType subroutineName '(' parameterList ')' subroutineBody
subroutineDecCFM -> 'constructor' | 'function' | 'method'
subroutineDecType -> 'void' | type
parameterList -> type varName parameterListExt
| lambda
parameterListExt -> ',' type varName parameterListExt
| lambda
subroutineBody -> '{' subroutineBodyVarDec statementList '}'
subroutineBodyVarDec -> varDec subroutineBodyVarDec
| lambda
varDec -> 'var' type varName varDecExt ';'
varDecExt -> ',' varName varDecExt
| lambda
className -> identifier
subroutineName -> identifier
varName -> identifier
statementList -> statement statementList
| lambda
statement -> letStatement | ifStatement | whileStatement | doStatement | returnStatement
letStatement -> 'let' varName letExpressionCheck '=' expression ';'
letExpressionCheck -> '[' expression ']'
| lambda
ifStatement -> 'if' '(' expression ')' '{' statementList '}' ifElseCheck
ifElseCheck -> 'else' '{' statementList '}'
| lambda
whileStatement -> 'while' '(' expression ')' '{' statementList '}'
doStatement -> 'do' subroutineCall ';'
returnStatement -> 'return' returnExpressionCheck ';'
returnExpressionCheck -> expression
| lambda
expression -> term expressionTermKleene
expressionTermKleene -> expressionTerm expressionTermKleene
| lambda
expressionTerm -> op term
term -> integerConstant | stringConstant | keywordConstant | varName | varName '[' expression ']'
| subroutineCall | '(' expression ')' | unaryOp term
subroutineCall -> subroutineName '(' expressionList ')'
| subroutineCallNames '.' subroutineName '(' expressionList ')'
subroutineCallNames -> className | varName
expressionList -> expression expressionListExt
| lambda
expressionListExt -> ',' expression expressionListExt
| lambda
op -> '+' | '-' | '*' | '/' | '&' | '|' | '<' | '>' | '='
unaryOp -> '-' | '~'
keywordConstant -> 'true' | 'false' | 'null' | 'this'