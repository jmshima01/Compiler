predict-> {Class [class ClassName { ClassVarDec SubroutineDec } $]} [class]
predict-> {ClassVarDec [ClassVarDecSF Type VarName ExtraVarExt ; ClassVarDec]} [static field]
predict-> {ClassVarDec [lambda]} [function method constructor }]
predict-> {ClassVarDecSF [static]} [static]
predict-> {ClassVarDecSF [field]} [field]
predict-> {ExtraVarExt [, VarName ExtraVarExt]} [,]
predict-> {ExtraVarExt [lambda]} [;]
predict-> {Type [int]} [int]
predict-> {Type [char]} [char]
predict-> {Type [boolean]} [boolean]
predict-> {Type [ClassName]} [identifier]
predict-> {SubroutineDec [SubroutineDecCFM SubroutineDecType SubroutineName ( ParameterList ) SubroutineBody SubroutineDec]} [function method constructor]
predict-> {SubroutineDec [lambda]} [}]
predict-> {SubroutineDecCFM [constructor]} [constructor]
predict-> {SubroutineDecCFM [function]} [function]
predict-> {SubroutineDecCFM [method]} [method]
predict-> {SubroutineDecType [void]} [void]
predict-> {SubroutineDecType [Type]} [char boolean identifier int]
predict-> {ParameterList [Type VarName ParameterListExt]} [boolean identifier int char]
predict-> {ParameterList [lambda]} [)]
predict-> {ParameterListExt [, Type VarName ParameterListExt]} [,]
predict-> {ParameterListExt [lambda]} [)]
predict-> {SubroutineBody [{ SubroutineBodyVarDec Statements }]} [{]
predict-> {SubroutineBodyVarDec [VarDec SubroutineBodyVarDec]} [var]
predict-> {SubroutineBodyVarDec [lambda]} [if while do } return let]
predict-> {VarDec [var Type VarName VarDecExt ;]} [var]
predict-> {VarDecExt [, VarName VarDecExt]} [,]
predict-> {VarDecExt [lambda]} [;]
predict-> {ClassName [identifier]} [identifier]
predict-> {SubroutineName [subroutinename]} [subroutinename]
predict-> {VarName [identifier]} [identifier]
predict-> {Statements [Statement Statements]} [do return let if while]
predict-> {Statements [lambda]} [}]
predict-> {Statement [LetStatement]} [let]
predict-> {Statement [IfStatement]} [if]
predict-> {Statement [WhileStatement]} [while]
predict-> {Statement [DoStatement]} [do]
predict-> {Statement [ReturnStatement]} [return]
predict-> {LetStatement [let VarName LetExpressionCheck = Expression ;]} [let]
predict-> {LetExpressionCheck [[ Expression ]]} [[]
predict-> {LetExpressionCheck [lambda]} [=]
predict-> {IfStatement [if ( Expression ) { Statements } IfElseCheck]} [if]
predict-> {IfElseCheck [else { Statements }]} [else]
predict-> {IfElseCheck [lambda]} [while do return let if]
predict-> {WhileStatement [while ( Expression ) { Statements }]} [while]
predict-> {DoStatement [do SubroutineCall ;]} [do]
predict-> {ReturnStatement [return ReturnExpressionCheck ;]} [return]
predict-> {ReturnExpressionCheck [Expression]} [integerconstant subroutinename stringconstant true false ( ~ null this identifier objectname -]
predict-> {ReturnExpressionCheck [lambda]} [;]
predict-> {Expression [Term ExpressionTerms]} [~ integerconstant stringconstant objectname ( - false null this identifier true subroutinename]
predict-> {ExpressionTerms [ExpressionTerm ExpressionTerms]} [+ < - * > = / & pipe]
predict-> {ExpressionTerms [lambda]} [) ; ] ,]
predict-> {ExpressionTerm [Op Term]} [- > = + * < / & pipe]
predict-> {Term [integerconstant]} [integerconstant]
predict-> {Term [stringconstant]} [stringconstant]
predict-> {Term [KeywordConstant]} [null this true false]
predict-> {Term [VarName VarNameTerm]} [identifier]
predict-> {Term [SubroutineCall]} [subroutinename objectname]
predict-> {Term [( Expression )]} [(]
predict-> {Term [UnaryOp Term]} [- ~]
predict-> {VarNameTerm [[ Expression ]]} [[]
predict-> {VarNameTerm [lambda]} [< pipe & - > * / + =]
predict-> {SubroutineCall [SubroutineName ( ExpressionList )]} [subroutinename]
predict-> {SubroutineCall [SubroutineCallName . SubroutineName ( ExpressionList )]} [objectname]
predict-> {SubroutineCallName [objectname]} [objectname]
predict-> {ExpressionList [Expression ExpressionListExt]} [stringconstant true identifier - objectname integerconstant null this ( ~ false subroutinename]
predict-> {ExpressionList [lambda]} [)]
predict-> {ExpressionListExt [, Expression ExpressionListExt]} [,]
predict-> {ExpressionListExt [lambda]} [)]
predict-> {Op [+]} [+]
predict-> {Op [-]} [-]
predict-> {Op [*]} [*]
predict-> {Op [/]} [/]
predict-> {Op [&]} [&]
predict-> {Op [pipe]} [pipe]
predict-> {Op [<]} [<]
predict-> {Op [>]} [>]
predict-> {Op [=]} [=]
predict-> {UnaryOp [-]} [-]
predict-> {UnaryOp [~]} [~]
predict-> {KeywordConstant [true]} [true]
predict-> {KeywordConstant [false]} [false]
predict-> {KeywordConstant [null]} [null]
predict-> {KeywordConstant [this]} [this]